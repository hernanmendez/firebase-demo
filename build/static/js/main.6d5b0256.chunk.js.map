{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","paragraphs","inUseByOthers","active","database","firebase","interval","timeout","update","bind","onChange","tellActive","resetTimeout","changeLineCount","values","this","ref","child","on","f","forEach","c","console","log","val","push","setState","JSON","parse","index","set","add","remove","setTimeout","clearTimeout","clearInterval","setInterval","length","stringify","inUse","splice","indexOf","event","i","preventDefault","newstate","target","value","document","getElementById","focus","className","map","text","disabled","key","id","e","onKeyDown","onFocus","onBlur","onClick","React","Component","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6d5b0256.chunk.js","sourcesContent":["import React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paragraphs: [''],\n      inUseByOthers: [],\n      active: null\n    }\n\n    this.database = this.props.firebase.database();\n    this.interval = null;\n    this.timeout = null;\n    this.update = this.update.bind(this)\n    this.onChange = this.onChange.bind(this)\n    this.tellActive = this.tellActive.bind(this)\n    this.resetTimeout = this.resetTimeout.bind(this)\n    this.changeLineCount = this.changeLineCount.bind(this)\n  };\n\n  componentDidMount() {\n    let values = []\n    this.database.ref().child('Projects').on('value', f => {\n      values = []\n      f.forEach(c => {\n        console.log(c.val())\n        values.push(c.val())\n        if (values[this.state.active] === this.state.paragraphs[this.state.active]) {\n          this.setState({ paragraphs: values })\n        }\n      })\n    })\n    this.database.ref(\"used\").on('value', f => {\n      this.setState({ inUseByOthers: JSON.parse(f.val()) })\n    })\n  }\n\n  update(index) {\n    if (this.state.paragraphs[index] !== null) {\n      this.database.ref('Projects/' + index).set(this.state.paragraphs[index])\n    }\n  }\n\n  changeLineCount(index, add) {\n    if (add) {\n      this.database.ref('Projects/' + index).set(this.state.paragraphs[index])\n    } else {\n      //delete\n      this.database.ref('Projects/' + index).remove()\n      setTimeout(() => this.database.ref('Projects/' + index).remove(), 300)\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout)\n    this.timeout = setTimeout(() => {\n      this.update(this.state.active)\n      clearInterval(this.interval)\n      this.tellActive(false, this.state.active)\n    }, 15000)\n  }\n\n  tellActive(state, index) {\n    if (state) {\n      this.interval = setInterval(() => {\n        this.update(index)\n      }, 1000)\n      this.resetTimeout()\n      if (index < this.state.paragraphs.length) {\n      this.database.ref('used').set(JSON.stringify([...this.state.inUseByOthers, index]))\n      }\n    } else {\n      this.update(index)\n      clearInterval(this.interval)\n      clearTimeout(this.timeout)\n      let inUse = ([...this.state.inUseByOthers])\n      inUse.splice(inUse.indexOf(index), 1)\n      this.database.ref('used').set(JSON.stringify(inUse))\n    }\n  }\n\n  onChange(event, i) {\n    event.preventDefault()\n    let newstate = { paragraphs: [...this.state.paragraphs] }\n    if (event.target.value.indexOf(\"\\n\") > -1) {\n      newstate.paragraphs.splice(i + 1, 0, '')\n      this.tellActive(false, i)\n      this.setState(newstate, () => document.getElementById(i + 1).focus())\n    } else {\n      newstate.paragraphs[i] = event.target.value\n      this.setState(newstate)\n      this.resetTimeout()\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.paragraphs.map((text, index) => {\n            return (\n              <TextareaAutosize\n                disabled={this.state.inUseByOthers.indexOf(index) > -1 && this.state.active !== index}\n                key={`text${index}`}\n                id={index}\n                onChange={e => this.onChange(e, index)}\n                onKeyDown={e => {\n                  if (e.key === \"Backspace\" && e.target.value === \"\") {\n                    e.preventDefault()\n                    let newstate = { paragraphs: [...this.state.paragraphs] }\n                    newstate.paragraphs.splice(index, 1)\n                    this.changeLineCount(index, false)\n                    this.tellActive(false, index)\n                    this.setState(newstate, () => {\n                      if (this.state.inUseByOthers.indexOf(index - 1) === -1) {\n                        document.getElementById(index - 1).focus()\n                      }\n                    })\n                  }\n                }}\n                onFocus={e => {\n                  this.setState({ active: index })\n                  this.tellActive(true, index)\n                }}\n                onBlur={e => {\n                  this.setState({ active: null })\n                  this.tellActive(false, index)\n                }}\n                value={text}\n              />\n            )\n          })\n        }\n        <button\n          onClick={() => this.setState({ paragraphs: [...this.state.paragraphs, ''] }, () => document.getElementById(this.state.paragraphs.length - 1).focus())}>\n          Add Line\n        </button>\n        <button onClick={() => {\n            this.database.ref('used').set(\"[]\")\n        }}>\n          Click to make every line available\n        </button>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from 'firebase/app';\nimport 'firebase/database'\n\nlet firebaseConfig = {\n  apiKey: \"AIzaSyA870ofDqsTXsAhXWifngor4qPQdKfAxss\",\n  authDomain: \"bad-docs.firebaseapp.com\",\n  databaseURL: \"https://bad-docs.firebaseio.com\",\n  projectId: \"bad-docs\",\n  storageBucket: \"bad-docs.appspot.com\",\n  messagingSenderId: \"1079006258139\",\n  appId: \"1:1079006258139:web:b731dccaab13e38eab3dfe\",\n  measurementId: \"G-99VLZBK3JZ\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App firebase={firebase} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}